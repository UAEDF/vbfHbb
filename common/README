1) Basic information such as cross sections, default tags and default colours is saved in:

	vbfHbb_info.json

You can use write_info.py to: 
	a) print its own options: 
	-->  ./write_info.py -h
	b) (default) print this json in human readable format:
	-->  ./write_info.py -i vbfHbb_info -r
	c) update this json:
	-->  ./write_info.py -i vbfHbb_info -u
	  - the default update value (in square brackets) is set to "don't change anything". 
	  - if you want to change something, type it and ENTER.
	  - you can skip updating sections by typing s+ENTER for them.





2) Info about samples (name, location, tags, values, ...) is saved in files such as:

	vbfHbb_samples.json

You can use write_samples.py to: 
	a) print its own options: 
	-->  ./write_samples.py -h
	b) print this json in human readable format:
	-->  ./write_samples.py -o vbfHbb_samples.json -r
	--> Available info:
	  - kColor colour value for ROOT
	  - sample cross section
	  - sample npassed (read from histogram inside)
	  - luminosity scale factor: npassed / cross section 
	  - sample location
	  - trigger indices for list of triggers as printed below (read from histograms inside)
	  - sample tag
	c) set a different basic info file (see section 1) with -b
	d) update this json:
	--> ./write_sample.py -o vbfHbb_samples.json -u
	  - the default update value (in square brackets) is set to "don't change anything". 
	  - if you want to change something, type it and ENTER.
	  - you can skip updating samples by typing s+ENTER for them.
	e) create new similar files:
	--> ./write_sample.py -o vbfHbb_samples.json -i filename.root
	  - is will write (append) to the file specified with -o
	  - it will write info for files listed with -i (comma separated)
	  - it will suggest basic info from vbfHbb_info.json (or the specified basic info file): confirm with ENTER or type something different and ENTER.
	f) clean (i.e. remove) entries from the file with -c





3) Info about variables (names, root names, histogramming, ...) is saved in files such as:
	
	vbfHbb_variables_mbb.json

You can use write_variables.py to:
	a) print its own options: 
	-->  ./write_variables.py -h
	b) print this json in human readable format:
	-->  ./write_variables.py -o vbfHbb_variables_mbb.json -r
	--> Available info:
	  - name e.g. for tagging files (no spaces etc.).
	  - name in root
	  - bare name in root (different from detailed variable name in case of vectors)
	  - titles (main, x, y)
	  - bin counts and limits (y-variables remain blank for 1D situations)
	c) update this json (cfr. section 2)
	d) create new similar files (cfr. section 2)
	e) clean (i.e. remove) entries from the file with -c (cfr. section 2)

	
